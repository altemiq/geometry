// -----------------------------------------------------------------------
// <copyright file="GaiaRecordTests.cs" company="Altemiq">
// Copyright (c) Altemiq. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace Altemiq.IO.Geometry.Spatialite;

using Altemiq.Geometry;

public class GaiaRecordTests
{
    [Test]
    public async Task GetPoint()
    {
        // POINT (30 10)
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x7C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0xFE]);
        _ = await Assert.That(reader.GetPoint()).IsEquivalentTo(new Point(30.0, 10.0));
    }

    [Test]
    public async Task GetPointZ()
    {
        // POINTZ (30 10 20)
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x7C, 0xE9, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0xFE]);
        _ = await Assert.That(reader.GetPointZ()).IsEquivalentTo(new PointZ(30.0, 10.0, 20.0));
    }

    [Test]
    public async Task GetPointZM()
    {
        // POINTZM (30 10 20 15)
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x7C, 0xB9, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0xFE]);
        _ = await Assert.That(reader.GetPointZM()).IsEquivalentTo(new PointZM(30.0, 10.0, 20.0, 15.0));
    }

    [Test]
    public async Task GetLineString()
    {
        // LINESTRING (30 10, 10 30, 40 40)
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x7C, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0xFE]);
        var lineString = reader.GetLineString();
        _ = await Assert.That(lineString).IsNotNull();

        _ = await Assert.That(lineString[0]).IsEquivalentTo(new Point(30.0, 10.0));
        _ = await Assert.That(lineString[1]).IsEquivalentTo(new Point(10.0, 30.0));
        _ = await Assert.That(lineString[2]).IsEquivalentTo(new Point(40.0, 40.0));
    }

    [Test]
    public async Task GetLineStringZ()
    {
        // LINESTRINGZ (30 10 20, 10 30 5, 40 40 40)
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x7C, 0xEA, 0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0xFE]);
        var lineString = reader.GetLineStringZ();
        _ = await Assert.That(lineString).IsNotNull();

        _ = await Assert.That(lineString[0]).IsEquivalentTo(new PointZ(30.0, 10.0, 20.0));
        _ = await Assert.That(lineString[1]).IsEquivalentTo(new PointZ(10.0, 30.0, 5.0));
        _ = await Assert.That(lineString[2]).IsEquivalentTo(new PointZ(40.0, 40.0, 40.0));
    }

    [Test]
    public async Task GetLineStringZM()
    {
        // LINESTRINGZM (30 10 20 15, 10 30 5 20, 40 40 40 40)
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x7C, 0xBA, 0x0B, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0xFE]);
        var lineString = reader.GetLineStringZM();
        _ = await Assert.That(lineString).IsNotNull();

        _ = await Assert.That(lineString[0]).IsEquivalentTo(new PointZM(30.0, 10.0, 20.0, 15.0));
        _ = await Assert.That(lineString[1]).IsEquivalentTo(new PointZM(10.0, 30.0, 5.0, 20.0));
        _ = await Assert.That(lineString[2]).IsEquivalentTo(new PointZM(40.0, 40.0, 40.0, 40.0));
    }

    [Test]
    public async Task GetPolygonSimple()
    {
        // POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10))
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x7C, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0xFE]);
        var polygon = reader.GetPolygon();
        _ = await Assert.That(polygon).IsNotEmpty().And.HasCount().EqualTo(1);

        var linearRing = polygon[0];
        _ = await Assert.That(linearRing).IsNotEmpty().And.HasCount().EqualTo(5);

        _ = await Assert.That(linearRing[0]).IsEquivalentTo(new Point(30.0, 10.0));
        _ = await Assert.That(linearRing[1]).IsEquivalentTo(new Point(10.0, 20.0));
        _ = await Assert.That(linearRing[2]).IsEquivalentTo(new Point(20.0, 40.0));
        _ = await Assert.That(linearRing[3]).IsEquivalentTo(new Point(40.0, 40.0));
        _ = await Assert.That(linearRing[4]).IsEquivalentTo(new Point(30.0, 10.0));
    }

    [Test]
    public async Task GetPolygonZSimple()
    {
        // POLYGONZ ((30 10 20, 10 20 30, 20 40 30, 40 40 40, 30 10 20))
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x7C, 0xEB, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0xFE]);
        var polygon = reader.GetPolygonZ();
        _ = await Assert.That(polygon).IsNotEmpty().And.HasCount().EqualTo(1);

        var linearRing = polygon[0];
        _ = await Assert.That(linearRing).IsNotEmpty().And.HasCount().EqualTo(5);

        _ = await Assert.That(linearRing[0]).IsEquivalentTo(new PointZ(30, 10, 20));
        _ = await Assert.That(linearRing[1]).IsEquivalentTo(new PointZ(10, 20.0, 30));
        _ = await Assert.That(linearRing[2]).IsEquivalentTo(new PointZ(20.0, 40.0, 30));
        _ = await Assert.That(linearRing[3]).IsEquivalentTo(new PointZ(40.0, 40.0, 40));
        _ = await Assert.That(linearRing[4]).IsEquivalentTo(new PointZ(30.0, 10.0, 20.0));
    }

    [Test]
    public async Task GetPolygonZMSimple()
    {
        // POLYGONZM ((30 10 20 15, 10 20 30 15, 20 40 30 50, 40 40 40 40, 30 10 20 15))
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x7C, 0xBB, 0x0B, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0xFE]);
        var polygon = reader.GetPolygonZM();
        _ = await Assert.That(polygon).IsNotEmpty().And.HasCount().EqualTo(1);

        var linearRing = polygon[0];
        _ = await Assert.That(linearRing).IsNotEmpty().And.HasCount().EqualTo(5);

        _ = await Assert.That(linearRing[0]).IsEquivalentTo(new PointZM(30.0, 10.0, 20.0, 15.0));
        _ = await Assert.That(linearRing[1]).IsEquivalentTo(new PointZM(10.0, 20.0, 30.0, 15.0));
        _ = await Assert.That(linearRing[2]).IsEquivalentTo(new PointZM(20.0, 40.0, 30.0, 50.0));
        _ = await Assert.That(linearRing[3]).IsEquivalentTo(new PointZM(40, 40, 40, 40));
        _ = await Assert.That(linearRing[4]).IsEquivalentTo(new PointZM(30, 10, 20, 15));
    }

    [Test]
    public async Task GetPolygonComplex()
    {
        // POLYGON ((35 10, 10 20, 15 40, 45 45, 35 10), (20 30, 35 35, 30 20, 20 30))
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x7C, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0xFE]);
        var polygon = reader.GetPolygon();
        _ = await Assert.That(polygon).IsNotEmpty().And.HasCount().EqualTo(2);

        var firstLinearRing = polygon[0];
        _ = await Assert.That(firstLinearRing).IsNotEmpty().And.HasCount().EqualTo(5);

        _ = await Assert.That(firstLinearRing[0]).IsEquivalentTo(new Point(35, 10));
        _ = await Assert.That(firstLinearRing[1]).IsEquivalentTo(new Point(10, 20));
        _ = await Assert.That(firstLinearRing[2]).IsEquivalentTo(new Point(15, 40));
        _ = await Assert.That(firstLinearRing[3]).IsEquivalentTo(new Point(45, 45));
        _ = await Assert.That(firstLinearRing[4]).IsEquivalentTo(new Point(35, 10));

        var secondLinearRing = polygon[1];
        _ = await Assert.That(secondLinearRing).IsNotEmpty().And.HasCount().EqualTo(4);

        _ = await Assert.That(secondLinearRing[0]).IsEquivalentTo(new Point(20, 30));
        _ = await Assert.That(secondLinearRing[1]).IsEquivalentTo(new Point(35, 35));
        _ = await Assert.That(secondLinearRing[2]).IsEquivalentTo(new Point(30, 20));
        _ = await Assert.That(secondLinearRing[3]).IsEquivalentTo(new Point(20, 30));
    }

    [Test]
    public async Task GetPolygonZComplex()
    {
        // POLYGONZ ((35 10 15, 10 20 30, 15 40 25, 45 45 45, 35 10 15), (20 30 10, 35 35 35, 30 20 25, 20 30 25))
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x7C, 0xEB, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0xFE]);
        var polygon = reader.GetPolygonZ();
        _ = await Assert.That(polygon).IsNotEmpty().And.HasCount().EqualTo(2);

        var linearRing = polygon[0];
        _ = await Assert.That(linearRing).IsNotEmpty().And.HasCount().EqualTo(5);
        var firstLinearRing = polygon[0];
        _ = await Assert.That(firstLinearRing).IsNotEmpty().And.HasCount().EqualTo(5);

        _ = await Assert.That(firstLinearRing[0]).IsEquivalentTo(new PointZ(35, 10, 15));
        _ = await Assert.That(firstLinearRing[1]).IsEquivalentTo(new PointZ(10, 20, 30));
        _ = await Assert.That(firstLinearRing[2]).IsEquivalentTo(new PointZ(15, 40, 25));
        _ = await Assert.That(firstLinearRing[3]).IsEquivalentTo(new PointZ(45, 45, 45));
        _ = await Assert.That(firstLinearRing[4]).IsEquivalentTo(new PointZ(35, 10, 15));

        var secondLinearRing = polygon[1];
        _ = await Assert.That(secondLinearRing).IsNotEmpty().And.HasCount().EqualTo(4);

        _ = await Assert.That(secondLinearRing[0]).IsEquivalentTo(new PointZ(20, 30, 10));
        _ = await Assert.That(secondLinearRing[1]).IsEquivalentTo(new PointZ(35, 35, 35));
        _ = await Assert.That(secondLinearRing[2]).IsEquivalentTo(new PointZ(30, 20, 25));
        _ = await Assert.That(secondLinearRing[3]).IsEquivalentTo(new PointZ(20, 30, 25));
    }

    [Test]
    public async Task GetPolygonZMComplex()
    {
        // POLYGONZM ((35 10 15 25, 10 20 30 40, 15 40 25 30, 45 45 45 45, 35 10 15 20), (20 30 10 40, 35 35 35 35, 30 20 25 20, 20 30 25 35))
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x7C, 0xBB, 0x0B, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0xFE]);
        var polygon = reader.GetPolygonZM();
        _ = await Assert.That(polygon).IsNotEmpty().And.HasCount().EqualTo(2);

        var linearRing = polygon[0];
        _ = await Assert.That(linearRing).IsNotEmpty().And.HasCount().EqualTo(5);
        var firstLinearRing = polygon[0];
        _ = await Assert.That(firstLinearRing).IsNotEmpty().And.HasCount().EqualTo(5);

        _ = await Assert.That(firstLinearRing[0]).IsEquivalentTo(new PointZM(35, 10, 15, 25));
        _ = await Assert.That(firstLinearRing[1]).IsEquivalentTo(new PointZM(10, 20, 30, 40));
        _ = await Assert.That(firstLinearRing[2]).IsEquivalentTo(new PointZM(15, 40, 25, 30));
        _ = await Assert.That(firstLinearRing[3]).IsEquivalentTo(new PointZM(45, 45, 45, 45));
        _ = await Assert.That(firstLinearRing[4]).IsEquivalentTo(new PointZM(35, 10, 15, 20));

        var secondLinearRing = polygon[1];
        _ = await Assert.That(secondLinearRing).IsNotEmpty().And.HasCount().EqualTo(4);

        _ = await Assert.That(secondLinearRing[0]).IsEquivalentTo(new PointZM(20, 30, 10, 40));
        _ = await Assert.That(secondLinearRing[1]).IsEquivalentTo(new PointZM(35, 35, 35, 35));
        _ = await Assert.That(secondLinearRing[2]).IsEquivalentTo(new PointZM(30, 20, 25, 20));
        _ = await Assert.That(secondLinearRing[3]).IsEquivalentTo(new PointZM(20, 30, 25, 35));
    }

    [Test]
    public async Task GetMultiPoint()
    {
        // MULTIPOINT (10 40, 40 30, 20 20, 30 10)
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x7C, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x69, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x69, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x69, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0xFE]);
        var multiPoint = reader.GetMultiPoint().ToArray();

        _ = await Assert.That(multiPoint[0]).IsEquivalentTo(new Point(10, 40));
        _ = await Assert.That(multiPoint[1]).IsEquivalentTo(new Point(40, 30));
        _ = await Assert.That(multiPoint[2]).IsEquivalentTo(new Point(20, 20));
        _ = await Assert.That(multiPoint[3]).IsEquivalentTo(new Point(30, 10));
    }

    [Test]
    public async Task GetMultiLineString()
    {
        // MULTILINESTRING ((10 10.0, 20 20.0, 10 40.0), (40 40.0, 30 30.0, 40 20.0, 30 10.0))
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x7C, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x69, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0xFE]);
        var lines = reader.GetMultiLineString().ToArray();
        _ = await Assert.That(lines).IsNotEmpty().And.HasCount().EqualTo(2);

        var firstLine = lines[0];
        _ = await Assert.That(firstLine).IsNotEmpty().And.HasCount().EqualTo(3);

        _ = await Assert.That(firstLine[0]).IsEquivalentTo(new Point(10, 10));
        _ = await Assert.That(firstLine[1]).IsEquivalentTo(new Point(20, 20));
        _ = await Assert.That(firstLine[2]).IsEquivalentTo(new Point(10, 40));

        // second line
        var secondLine = lines[1];
        _ = await Assert.That(secondLine).IsNotEmpty().And.HasCount().EqualTo(4);

        _ = await Assert.That(secondLine[0]).IsEquivalentTo(new Point(40, 40));
        _ = await Assert.That(secondLine[1]).IsEquivalentTo(new Point(30, 30));
        _ = await Assert.That(secondLine[2]).IsEquivalentTo(new Point(40, 20));
        _ = await Assert.That(secondLine[3]).IsEquivalentTo(new Point(30, 10));
    }

    [Test]
    public async Task GetMultiPolygonSimple()
    {
        // MULTIPOLYGON (((30 20, 10 40, 45 40, 30 20)), ((15 5, 40 10, 10 20, 5 10, 15 5)))
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x7C, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x69, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x69, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0xFE]);
        var polygons = reader.GetMultiPolygon().ToArray();
        _ = await Assert.That(polygons).IsNotEmpty().And.HasCount().EqualTo(2);

        var firstPolygon = polygons[0];
        _ = await Assert.That(firstPolygon).IsNotEmpty().And.HasCount().EqualTo(1);

        // first ring
        var firstPolygonLinearRing = firstPolygon[0];
        _ = await Assert.That(firstPolygonLinearRing).IsNotEmpty().And.HasCount().EqualTo(4);

        _ = await Assert.That(firstPolygonLinearRing[0]).IsEquivalentTo(new Point(30, 20));
        _ = await Assert.That(firstPolygonLinearRing[1]).IsEquivalentTo(new Point(10, 40));
        _ = await Assert.That(firstPolygonLinearRing[2]).IsEquivalentTo(new Point(45, 40));
        _ = await Assert.That(firstPolygonLinearRing[3]).IsEquivalentTo(new Point(30, 20));

        // second polygon
        var secondPolygon = polygons[1];
        _ = await Assert.That(secondPolygon).IsNotEmpty().And.HasCount().EqualTo(1);

        // first ring
        var secondPolygonLinearRing = secondPolygon[0];
        _ = await Assert.That(secondPolygonLinearRing).IsNotEmpty().And.HasCount().EqualTo(5);

        _ = await Assert.That(secondPolygonLinearRing[0]).IsEquivalentTo(new Point(15, 5));
        _ = await Assert.That(secondPolygonLinearRing[1]).IsEquivalentTo(new Point(40, 10));
        _ = await Assert.That(secondPolygonLinearRing[2]).IsEquivalentTo(new Point(10, 20));
        _ = await Assert.That(secondPolygonLinearRing[3]).IsEquivalentTo(new Point(5, 10));
        _ = await Assert.That(secondPolygonLinearRing[4]).IsEquivalentTo(new Point(15, 5));
    }

    [Test]
    public async Task GetMultiPolygonComplex()
    {
        // MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((20 35, 45 20, 30 5, 10 10, 10 30, 20 35), (30 20, 20 25, 20 15, 30 20)))
        var reader = new GaiaRecord([0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x7C, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x69, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x40, 0x69, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x46, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x41, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x40, 0xFE]);
        var polygons = reader.GetMultiPolygon().ToArray();
        _ = await Assert.That(polygons).IsNotEmpty().And.HasCount().EqualTo(2);

        var firstPolygon = polygons[0];
        _ = await Assert.That(firstPolygon).IsNotEmpty().And.HasCount().EqualTo(1);

        // first ring
        var firstPolygonLinearRing = firstPolygon[0];
        _ = await Assert.That(firstPolygonLinearRing).IsNotEmpty().And.HasCount().EqualTo(4);

        _ = await Assert.That(firstPolygonLinearRing[0]).IsEquivalentTo(new Point(40, 40));
        _ = await Assert.That(firstPolygonLinearRing[1]).IsEquivalentTo(new Point(20, 45));
        _ = await Assert.That(firstPolygonLinearRing[2]).IsEquivalentTo(new Point(45, 30));
        _ = await Assert.That(firstPolygonLinearRing[3]).IsEquivalentTo(new Point(40, 40));

        // second polygon
        var secondPolygon = polygons[1];
        _ = await Assert.That(secondPolygon).IsNotEmpty().And.HasCount().EqualTo(2);

        // first ring
        var secondPolygonFirstLinearRing = secondPolygon[0];
        _ = await Assert.That(secondPolygonFirstLinearRing).IsNotEmpty().And.HasCount().EqualTo(6);

        _ = await Assert.That(secondPolygonFirstLinearRing[0]).IsEquivalentTo(new Point(20, 35));
        _ = await Assert.That(secondPolygonFirstLinearRing[1]).IsEquivalentTo(new Point(45, 20));
        _ = await Assert.That(secondPolygonFirstLinearRing[2]).IsEquivalentTo(new Point(30, 5));
        _ = await Assert.That(secondPolygonFirstLinearRing[3]).IsEquivalentTo(new Point(10, 10));
        _ = await Assert.That(secondPolygonFirstLinearRing[4]).IsEquivalentTo(new Point(10, 30));
        _ = await Assert.That(secondPolygonFirstLinearRing[5]).IsEquivalentTo(new Point(20, 35));

        // second ring
        var secondPolygonSecondLinearRing = secondPolygon[1];
        _ = await Assert.That(secondPolygonSecondLinearRing).IsNotEmpty().And.HasCount().EqualTo(4);

        _ = await Assert.That(secondPolygonSecondLinearRing[0]).IsEquivalentTo(new Point(30, 20));
        _ = await Assert.That(secondPolygonSecondLinearRing[1]).IsEquivalentTo(new Point(20, 25));
        _ = await Assert.That(secondPolygonSecondLinearRing[2]).IsEquivalentTo(new Point(20, 15));
        _ = await Assert.That(secondPolygonSecondLinearRing[3]).IsEquivalentTo(new Point(30, 20));
    }
}